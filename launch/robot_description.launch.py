import os
import launch_ros
from launch_ros.actions import Node
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.substitutions import Command, LaunchConfiguration

# Function to generate the launch description, which defines all the nodes and parameters for launching.
def generate_launch_description():

    # Find the package directory for "go1_description" using ROS 2's package index.
    robot_description_pkg = launch_ros.substitutions.FindPackageShare(package="go1_description").find("go1_description")
    
    # Set the default path for the robot's URDF file (in Xacro format).
    default_model_path = os.path.join(robot_description_pkg, "xacro/robot.xacro")

    # Launch configuration variables (these will be set by launch arguments).
    use_sim_time = LaunchConfiguration("use_sim_time")
    description_path = LaunchConfiguration("description_path")
    
    # Declare launch arguments with default values and descriptions.
    declare_description_path = DeclareLaunchArgument(
        name="description_path",  # Name of the launch argument.
        default_value=default_model_path,  # Default value is the path to the URDF file.
        description="Absolute path to robot urdf file"  # Description for this argument.
    )
    
    declare_use_sim_time = DeclareLaunchArgument(
        "use_sim_time",  # Name of the launch argument.
        default_value="false",  # Default value is "false", meaning real time is used by default.
        description="Use simulation (Gazebo) clock if true"  # Description for this argument.
    )

    # Define the robot_state_publisher node, which publishes the robot's state (e.g., joint positions) to the ROS TF system.
    robot_state_publisher_node = Node(
        package="robot_state_publisher",  # Package that provides the robot_state_publisher executable.
        executable="robot_state_publisher",  # The executable to run.
        
        parameters=[
            {"robot_description": Command(["xacro ", description_path])},  # The robot's URDF description, generated by processing the Xacro file.
            {"use_tf_static": False},  # Whether to use static transforms; False means the transforms are dynamic.
            {"publish_frequency": 200.0},  # Frequency at which the transforms are published (200 Hz).
            {"ignore_timestamp": True},  # Ignore timestamp in published transforms (useful when combining live data with simulation).
            {'use_sim_time': use_sim_time}  # Use simulated time if specified by the "use_sim_time" argument.
        ],
        # remappings=(("robot_description", "robot_description")),  # Commented out remapping; no need to remap in this setup.
    )

    # Return the launch description, which includes all the declared launch arguments and the robot_state_publisher node.
    return LaunchDescription(
        [
            declare_description_path,  # Include the description path launch argument.
            declare_use_sim_time,  # Include the use_sim_time launch argument.
            robot_state_publisher_node,  # Include the robot_state_publisher node in the launch description.
        ]
    )
